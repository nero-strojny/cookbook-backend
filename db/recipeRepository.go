package db

import (
	"context"
	"errors"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"server/models"
	"time"
)

type RecipeDB interface {
	RecipeGetter
	RecipeDeleter
	RecipeCreator
	RecipeUpdater
}

type RecipeGetter interface {
	GetRecipe(recipeID string) (models.Recipe, error)
	GetPaginatedRecipes(request models.PaginatedRecipeRequest) ([]models.Recipe, error)
	GetFilteredRecipeCount(request models.PaginatedRecipeRequest) (int64, error)
	CountRecipes() (int64, error)
}

type RecipeCreator interface {
	CreateRecipe(recipe *models.Recipe) error
}

type RecipeDeleter interface {
	DeleteRecipe(recipeID string) error
}

type RecipeUpdater interface {
	UpdateRecipe(recipeID string, updatedRecipe models.Recipe) (models.Recipe, error)
}

type RecipeRepository struct {
	recipeCollection *mongo.Collection
}

func NewRecipeRepository(client *mongo.Client) *RecipeRepository {
	return &RecipeRepository{
		recipeCollection: client.Database("tastyBoiDatabase").Collection("cookbookCollection"),
	}
}

func (r RecipeRepository) GetRecipe(recipeID string) (models.Recipe, error) {
	result := models.Recipe{}
	id, _ := primitive.ObjectIDFromHex(recipeID)
	filter := bson.M{"_id": id}
	err := r.recipeCollection.FindOne(context.Background(), filter).Decode(&result)
	if err != nil {
		return result, err
	}
	return result, nil
}

// CreateRecipe - CreateRecipe inserts one recipe into the database. It does not validate
// the recipe fields, after a successful insert the model's RecipeID will be updated with
// the ID generated by the database
func (r RecipeRepository) CreateRecipe(recipe *models.Recipe) error {
	result, err := r.recipeCollection.InsertOne(context.Background(), recipe)

	if err != nil {
		return err
	}

	recipe.RecipeID = result.InsertedID.(primitive.ObjectID)
	return nil
}

func (r RecipeRepository) DeleteRecipe(recipeID string) error {
	id, _ := primitive.ObjectIDFromHex(recipeID)
	filter := bson.M{"_id": id}
	result, err := r.recipeCollection.DeleteOne(context.Background(), filter)
	if err != nil {
		return err
	}
	if result.DeletedCount != 1 {
		return errors.New("nothing was deleted")
	}
	return nil
}

func (r RecipeRepository) UpdateRecipe(recipeID string, updatedRecipe models.Recipe) (models.Recipe, error) {
	currentTime := time.Now()
	updatedRecipe.LastUpdatedDate = currentTime.Format("2006.01.02 15:04:05")
	id, _ := primitive.ObjectIDFromHex(recipeID)
	filter := bson.M{"_id": id}
	//Could do this as an update but that requires checking what fields are different between recipes
	//Could be a hassle with a long list of ingredients or measurements. Easier to just replace the entire recipe with the new update
	opts := options.Replace().SetUpsert(true)
	result, err := r.recipeCollection.ReplaceOne(context.Background(), filter, updatedRecipe, opts)
	if err != nil {
		return models.Recipe{}, err
	}
	if result.UpsertedID != nil {
		updatedRecipe.RecipeID = result.UpsertedID.(primitive.ObjectID)
	}
	return updatedRecipe, nil
}

func (r RecipeRepository) CountRecipes() (int64, error) {
	count, err := r.recipeCollection.CountDocuments(context.Background(), bson.D{{}})
	if err != nil {
		return -1, err
	}
	return count, nil
}

func (r RecipeRepository) GetPaginatedRecipes(request models.PaginatedRecipeRequest) ([]models.Recipe, error) {
	// Get the first page
	var emptyResults []models.Recipe
	var results []models.Recipe
	var nextID primitive.ObjectID
	id, _ := primitive.ObjectIDFromHex("0")
	firstRecipeBatch, firstBatchErr := r.getPage(request.PageSize, id, request.QueryRecipe)
	if firstBatchErr != nil {
		return emptyResults, firstBatchErr
	}
	results = firstRecipeBatch
	nextID = firstRecipeBatch[len(results)-1].RecipeID

	// continue to get a batch of recipes until we reach the page number
	if request.PageCount > 0 {
		for i := 1; i <= request.PageCount; i++ {
			newresults, err := r.getPage(request.PageSize, nextID, request.QueryRecipe)
			if err != nil {
				return emptyResults, err
			}
			if len(newresults) == 0 {
				return results, nil
			}
			results = newresults
			nextID = newresults[len(results)-1].RecipeID
		}
	}
	return results, nil
}

func (r RecipeRepository) GetFilteredRecipeCount(request models.PaginatedRecipeRequest) (int64, error) {
	filterArray := bson.A{}
	queryRecipe := request.QueryRecipe
	var itemNumber int64
	var countErr error
	if queryRecipe.RecipeName != "" {
		regex := `(?i).*` + queryRecipe.RecipeName + `.*`
		nameFilter := bson.M{"recipename": bson.M{"$regex": regex}}
		filterArray = append(filterArray, nameFilter)
	}
	if len(queryRecipe.Tags) > 0 {
		tagFilter := bson.M{"tags": bson.M{"$all": queryRecipe.Tags}}
		filterArray = append(filterArray, tagFilter)
	}
	if len(filterArray) > 0 {
		itemCount, err := r.recipeCollection.CountDocuments(
			context.Background(),
			bson.M{"$and": filterArray},
		)
		itemNumber = itemCount
		countErr = err
	} else {
		itemCount, err := r.recipeCollection.CountDocuments(
			context.Background(),
			bson.D{{}},
		)
		itemNumber = itemCount
		countErr = err
	}
	return itemNumber, countErr
}

func decodeCurToRecipes(cur *mongo.Cursor) ([]models.Recipe, error) {
	emptyResults := []models.Recipe{}
	var results []models.Recipe
	for cur.Next(context.Background()) {
		result := models.Recipe{}
		e := cur.Decode(&result)
		if e != nil {
			return emptyResults, e
		}
		results = append(results, result)

	}

	if err := cur.Err(); err != nil || len(results) == 0 {
		return emptyResults, err
	}

	cur.Close(context.Background())
	return results, nil
}

func (r RecipeRepository) getPage(pageSize int64, idLimit primitive.ObjectID, queryRecipe models.Recipe) ([]models.Recipe, error) {
	var emptyResults []models.Recipe
	filterArray := bson.A{}
	if queryRecipe.RecipeName != "" {
		regex := `(?i).*` + queryRecipe.RecipeName + `.*`
		nameFilter := bson.M{"recipename": bson.M{"$regex": regex}}
		filterArray = append(filterArray, nameFilter)
	}
	if len(queryRecipe.Tags) > 0 {
		tagFilter := bson.M{"tags": bson.M{"$all": queryRecipe.Tags}}
		filterArray = append(filterArray, tagFilter)
	}
	findOptions := options.Find()
	findOptions.SetLimit(pageSize)
	filterArray = append(filterArray, bson.M{"_id": bson.M{"$gt": idLimit}})
	cur, err := r.recipeCollection.Find(
		context.Background(),
		bson.M{"$and": filterArray},
		findOptions,
	)
	if err != nil {
		return emptyResults, err
	}

	return decodeCurToRecipes(cur)
}
